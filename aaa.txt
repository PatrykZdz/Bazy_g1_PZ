print("\nRząd II:")

for obj in df.index:
    if obj in removed_objects:
        continue
    row = remaining.loc[obj]
    found_rule = False
    attrs = df.columns[:-1]
    for attr1, attr2 in itertools.combinations(attrs, 2):
        val1 = row[attr1]
        val2 = row[attr2]
        
        # Szukamy zgodnych obiektów w całym df
        all_matches = df[(df[attr1] == val1) & (df[attr2] == val2)]
        decision_values = all_matches['d'].unique()
        
        if len(decision_values) == 1:
            decision = decision_values[0]
            covered_matches = remaining[(remaining[attr1] == val1) & (remaining[attr2] == val2)]
            if not covered_matches.empty:
                rule = (f"({attr1} = {val1}) ∧ ({attr2} = {val2}) ⇒ (d = {decision})")
                rules.append(rule)
                covered_objects = covered_matches.index.tolist()
                if len(all_matches) > 1:
                    print(f"z {obj} {rule}[{len(all_matches)}], wyrzucamy z rozwazan obiekt {covered_objects[0]}")
                else:
                    print(f"z {obj} {rule}, wyrzucamy z rozwazan obiekt {covered_objects[0]}")
                removed_objects.update(covered_objects)
                found_rule = True
                break
    if not found_rule:
        print(f"z {obj} brak")

remaining = remaining.drop(index=removed_objects)