/*
 * File:   ISI1_Bogdanski_zad2.c
 * Author: local
 *
 * Created on May 15, 2024, 12:09 PM
 */

// CONFIG2
#pragma config POSCMOD = HS             // Primary Oscillator Select (HS Oscillator mode selected)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = PRIPLL           // Oscillator Select (Primary Oscillator with PLL module (HSPLL, ECPLL))
#pragma config IESO = OFF               // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) disabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = OFF             // Watchdog Timer Enable (Watchdog Timer is disabled)
#pragma config ICS = PGx2               // Comm Channel Select (Emulator/debugger uses EMUC2/EMUD2)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)

#include "xc.h"
#include <libpic30.h>
#include "buttons.h"
#include "adc.h"
#include "buttons.c"
#include "adc.c"

int main(void) {
    AD1PCFG = 0xFFFF;
    TRISA = 0x0000;
    ADC_SetConfiguration(ADC_CONFIGURATION_DEFAULT);
    ADC_ChannelEnable(ADC_CHANNEL_POTENTIOMETER);
    unsigned int value;
    int time = 0;
    while(1){
        value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER); 
        if (value == 0xFFFF){
        continue;
        }
        unsigned char normalValue = value >> 2;
        if(normalValue >= 127){
            if(time>=20){
                LATA = 255;
            } else {
                LATA = 1;
                __delay32(2500000);
                LATA = 0;
                __delay32(2500000);
                time++;
            }
        } else {
            time = 0;
            LATA = 0;
        }
        if(BUTTON_IsPressed(BUTTON_S3)==true){
            time = 0;
        }
    }
    return 0;
}
