import pandas as pd
import numpy as np
import itertools

# Tworzymy DataFrame na podstawie danych
data = {
    'a1': [1, 1, 1, 1, 1, 1, 1, 1],
    'a2': [1, 1, 1, 1, 1, 1, 1, 1],
    'a3': [1, 1, 1, 1, 2, 2, 2, 2],
    'a4': [1, 1, 3, 3, 1, 1, 2, 2],
    'a5': [3, 3, 2, 3, 2, 2, 3, 4],
    'a6': [1, 2, 1, 2, 1, 2, 1, 1],
    'd' : [1, 1, 0, 1, 0, 1, 0, 1]
}
df = pd.DataFrame(data, index=['o1', 'o2', 'o3', 'o4', 'o5', 'o6', 'o7', 'o8'])

remaining = df.copy()
rules = []
removed_objects = set()

print("Rząd I:")

# Rząd I – pojedyncze atrybuty
for obj in df.index:
    if obj in removed_objects:
        continue
    row = remaining.loc[obj]
    found_rule = False
    for attr in df.columns[:-1]:
        value = row[attr]
        decision = row['d']
        matches = remaining[(remaining[attr] == value)]
        decision_values = matches['d'].unique()
        if len(decision_values) == 1:
            # Policzenie ilu obiektów dotyczy w całym zbiorze (nie tylko remaining)
            all_matches = df[(df[attr] == value) & (df['d'] == decision)]
            covered_objects = matches.index.tolist()
            rule = (f"({attr} = {value}) ⇒ (d = {decision})")
            rules.append(rule)
            if len(all_matches) > 1:
                print(f"z {obj} {rule}[{len(all_matches)}], wyrzucamy z rozważań obiekty {', '.join(covered_objects)}")
            else:
                print(f"z {obj} {rule}, wyrzucamy z rozwazan obiekt {covered_objects[0]}")
            removed_objects.update(covered_objects)
            found_rule = True
            break
    if not found_rule:
        print(f"z {obj} brak")

remaining = remaining.drop(index=removed_objects)

print("\nRząd II:")

# Rząd II – kombinacje dwóch atrybutów
for obj in df.index:
    if obj in removed_objects:
        continue
    row = remaining.loc[obj]
    found_rule = False
    attrs = df.columns[:-1]
    for attr1, attr2 in itertools.combinations(attrs, 2):
        val1 = row[attr1]
        val2 = row[attr2]
        matches = remaining[(remaining[attr1] == val1) & (remaining[attr2] == val2)]
        decision_values = matches['d'].unique()
        if len(decision_values) == 1 and len(matches) > 0:
            all_matches = df[(df[attr1] == val1) & (df[attr2] == val2) & (df['d'] == row['d'])]
            covered_objects = matches.index.tolist()
            rule = (f"({attr1} = {val1}) ∧ ({attr2} = {val2}) ⇒ (d = {row['d']})")
            rules.append(rule)
            if len(all_matches) > 1:
                print(f"z {obj} {rule}[{len(all_matches)}], wyrzucamy z rozwazan obiekt {covered_objects[0]}")
            else:
                print(f"z {obj} {rule}, wyrzucamy z rozwazan obiekt {covered_objects[0]}")
            removed_objects.update(covered_objects)
            found_rule = True
            break
    if not found_rule:
        print(f"z {obj} brak")
